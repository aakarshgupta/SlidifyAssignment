plot(mod)
pred<- predict(mod,testing)
install.packages("elasticnet")
library("elasticnet")
?enet
enet(as.matrix(training[,-c("CompressiveStrength")]),training$CompressiveStrength,lambda=0)
enet(training[,-c("CompressiveStrength")],training$CompressiveStrength,lambda=0)
rownames(concrete)
colnames(concrete)
enet(training[,-9],training$CompressiveStrength,lambda=0)
enet(as.matrix(training[,-9]),training$CompressiveStrength,lambda=0)
obj<-enet(as.matrix(training[,-9]),training$CompressiveStrength,lambda=0)
plot(obj,xvar=c("penalty"))
plot(obj,xvar=c("penalty"),use.color=TRUE)
obj
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubrudate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("plyr")
library(plyr)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv(C:/Users/SHAILENDRA/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv(C:/Users/SHAILENDRA/Desktop/gaData.csv")
dat = read.csv(C://Users/SHAILENDRA/Desktop/gaData.csv")
dat = read.csv(C:\Users/SHAILENDRA/Desktop/gaData.csv")
dat = read.csv(C:\Users\SHAILENDRA\Desktop\gaData.csv")
getwd()
dat = read.csv("C:/Users/SHAILENDRA/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library("forecast")
dat = read.csv("C:/Users/SHAILENDRA/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?ts
?bats
bats(tstrain)
mod<-bats(tstrain)
forecast(mod)
forecast(mod,h=235)
pred<-forecast(mod,h=235)
pred$lower[,2]
pred$upper[,2]
a<-pred$lower[,2]
b<-pred$upper[,2]
confusionMatrix(a,b)
a/b
a<-pred$lower[,2]
b<-pred$upper[,2]
a
b
pred
a
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?svm
mod.svm <- svm(CompressiveStrength ~ .,data=training)
pred.svm <- predict(mod.svm,testing)
summary(pred.svm)
summary(mod.svm)
?predict
?confusionMatrix
confusionMatrix(pred.svm,testing$CompressiveStrength)
pred.svm
mod.svm <- svm(CompressiveStrength ~ .,data=training)
pred.svm <- predict(mod.svm,testing)
confusionMatrix(pred.svm,testing$CompressiveStrength)
mod.svm <- svm(CompressiveStrength ~ .,data=training)
mod.svm
error <- pred.svm - testing[,9]
sqrt(mean(error))
sqrt(mean(error**2))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod <- train(CompressiveStrength ~ ., method="glmnet",data=training,trControl=trainControl(method="cv"))
pred<- predict(mod,testing)
obj<-enet(as.matrix(training[,-9]),training$CompressiveStrength,lambda=0)
plot(obj,xvar=c("penalty"),use.color=TRUE)
plot.enet(mod$finalModel, xvar = "penalty", use.color = TRUE)
plot(obj,xvar=c("penalty"),use.color=TRUE)
plot(obj,xvar=c("penalty"),use.color=TRUE)
?plot
plot(obj,xvar=c("penalty"),use.color=TRUE)
mod
obj
plot(obj,xvar=c("penalty"),use.color=TRUE,legends=TRUE)
legend("topright", legend = c(" ", " "),
lty = 1:2, xjust = 1, yjust = 1,
title = "Line Types")
legend("topright", legend = c(colnames(obj)),
lty = 1:2, xjust = 1, yjust = 1,
title = "Line Types")
obj
View(train)
View(train)
View(training)
View(training)
pred<- predict(mod,testing)
obj<-enet(as.matrix(training[,-9]),training$CompressiveStrength,lambda=0)
plot(obj,xvar=c("penalty"),use.color=TRUE)
pred<- predict(mod,testing)
obj<-enet(as.matrix(training[,-9]),training$CompressiveStrength,lambda=0)
plot(obj,xvar=c("penalty"),use.color=TRUE)
qplot(obj,xvar=c("penalty"),use.color=TRUE)
plot(obj,xvar=c("penalty"),use.color=TRUE)
plot(obj,xvar=c("penalty"),use.color=TRUE)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1 <- train(diagnosis ~ ., method="rf",data=training,trControl=trainControl(method="cv"))
mod2 <- train(diagnosis ~ ., method="gbm",data=training,trControl =trainControl(method="cv"))
mod3 <- train(diagnosis ~ ., method="lda",data=training,trControl=trainControl(method="cv"))
pred.rf<-predict(mod1,testing)
pred.gbm<- predict(mod2,testing)
pred.lda<- predict(mod3,testing)
predDF<-data.frame(pred.rf,pred.gbm,pred.lda,diagnosis=testing$diagnosis)
combModFit<-train(diagnosis ~ .,method="rf",data=predDF,trControl=trainControl(method="cv"))
pred.comb<-predict(combModFit,predDF)
confusionMatrix(pred.rf,testing$diagnosis)
confusionMatrix(pred.gbm,testing$diagnosis)
confusionMatrix(pred.lda,testing$diagnosis)
confusionMatrix(pred.comb,predDF$diagnosis)
confusionMatrix(pred.comb,testing$diagnosis)
getwd()
setwd("D:/Akki/Data Product/ShinyAssignment")
runApp()
library(shiny)
runApp()
?rnorm
runApp()
runApp()
runApp()
?isolate
runApp()
runApp()
runApp()
runApp()
a <- as.numeric(input$ipl)
b <- as.numeric(input$ipu)
c <- as.numeric(input$ips)
d <- as.character(input$ipr)
s <- sample(a:b,c,replace='d')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sample
runApp()
runApp()
runApp()
runApp()
?sample
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dnorm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?paste
runApp()
runApp()
runApp()
?paste
runApp()
runApp()
runApp()
?eval
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sample
runApp()
?sample
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?if
()
?if()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sample
runApp()
runApp()
runApp()
?quantile
quantile(1:1000)
quantile(1:1000)[2]
runApp()
?text
runApp()
?rnorm
?lines
?rnorm
runApp()
runApp()
runApp()
?median
?mode
?range
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?mfrow
?mfrows
??mfrows
?par
?par
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?beanplot
??beanplot
runApp()
runApp()
runApp()
runApp()
deployApp()
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='aakarshgupta', token='2ACF7DC1F58445B6EEF7223931AC09B3', secret='cEgRw6qXuJkwo7G3/dUsalaHOHmDw9ub6RR07uga')
runApp(displaymode='showcase')
runApp(displayMode='showcase')
runApp(displayMode = 'showcase')
library(shinyApp)
library(shinyApps)
library(shinyapps)
runApp(displayMode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(displaymode='showcase')
runApp(display.mode = 'showcase')
deployApp()
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("D:/Akki/Data Product/ShinyAssignment/shinyapps")
author("SlidifyAssignment")
slidify("index.Rmd")
library(knitr)
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
getwd(())
getwd()
setwd("D:/Akki/Data Product")
author("SlidifyAssignment")
slidify("index.Rmd")
author("SlidifyAssignment")
slidify("index.Rmd")
browseURL('index.html')
getwd()
author("SlidifyAssignment")
getwd()
getwd()
setwd("D:/Akki/Data Product")
getwd()
author("SlidifyAssignment")
slidify("index.Rmd")
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
mean(a)
mean(b)
a <- sample(1:1000,100,replace=T)
b <- sample(1:1000,100,replace=T)
c <- mean(a)
d <- mean(b)
table(c,d)
?barplot
barplot(c,d)
barplot(c,d)
barplot(c,d)
?barplot
a <- sample(1:1000,100,replace=T)
b <- sample(0:500,100,replace=T)
c <- mean(a)
d <- mean(b)
barplot(c,d)
?barplot
barplot(c)
barplot(d)
a <- sample(1:1000,100,replace=T)
b <- sample(0:500,100,replace=T)
e <- c(mean(a),mean(b))
barplot(e)
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
publish(title = 'SlidifyAssignment', 'index.html', host = 'rpubs')
publish(user = "aakarshgupta", repo = "SlidifyAssignment")
publish(user = "aakarsh.gupta@gmail.com", repo = "SlidifyAssignment")
publish(user = "aakarshgupta", repo = "https://github.com/aakarshgupta/SlidifyAssignment")
